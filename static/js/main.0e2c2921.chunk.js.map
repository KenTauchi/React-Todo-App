{"version":3,"sources":["components/OverDueLists/OverDueList/OverDueList.module.css","components/TodoLists/TodoList/TodoList.module.css","components/Layout/Layout.module.css","components/InputForm/InputForm.module.css","hoc/Aux.js","components/Layout/Layout.js","components/InputForm/InputForm.js","components/OverDueLists/OverDueList/OverDueList.js","components/TodoLists/TodoList/TodoList.js","container/TodoBuilder/TodoBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","aux","props","children","layout","Aux","className","classes","Layout","inputForm","InputForm","onSubmit","click","name","type","placeholder","overDueList","OverDueList","Alert","Due","time","Content","content","onClick","todoList","dueRawDate","Date","toLocaleString","length","duedate","substring","toUTCString","TodoList","id","TodoBuilder","state","todos","overdue","componentDidMount","dataExist","localStorage","getItem","storage","JSON","parse","overDueStorage","setState","addToOverdueStorage","newState","setItem","stringify","addToList","event","preventDefault","newValue","target","desc","value","newDue","datetime","prevState","todo","addToStorage","deleteTodo","index","newList","splice","this","map","list","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e2c2921.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"OverDueList\":\"OverDueList_OverDueList__22nGn\",\"Content\":\"OverDueList_Content__MS4hB\",\"Due\":\"OverDueList_Due__1VqB3\",\"Alert\":\"OverDueList_Alert__3o99Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"TodoList_TodoList__TnEgK\",\"Content\":\"TodoList_Content___unvV\",\"Due\":\"TodoList_Due__o0Qea\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3SBgk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"InputForm\":\"InputForm_InputForm__3NvE0\",\"inputForm\":\"InputForm_inputForm__10-Mc\"};","const aux = (props) => props.children;\n\nexport default aux;\n","import React from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport classes from \"./Layout.module.css\";\n\nconst layout = (props) => (\n  <Aux>\n    <main className={classes.Layout}>{props.children}</main>\n  </Aux>\n);\n\nexport default layout;\n","import React from \"react\";\nimport classes from \"./InputForm.module.css\";\n\nconst inputForm = (props) => (\n  <form className={classes.InputForm} onSubmit={props.click}>\n    <span>Todo Description</span>\n    <textarea name=\"desc\" type=\"text\" placeholder=\"Please add your todo here\" />\n    <span>Due Date</span>\n    <input name=\"datetime\" type=\"datetime-local\" />\n    <button type=\"submit\">Add</button>\n  </form>\n);\n\nexport default inputForm;\n","import React from \"react\";\nimport classes from \"./OverDueList.module.css\";\n\nconst overDueList = (props) => {\n  return (\n    <li className={classes.OverDueList}>\n      <div className={classes.Alert}>*Overdue</div>\n      <div className={classes.Due}>Due: {props.time}</div>\n      <div className={classes.Content}>{props.content}</div>\n\n      <button onClick={props.click}>Delete</button>\n    </li>\n  );\n};\n\nexport default overDueList;\n","import React from \"react\";\nimport classes from \"./TodoList.module.css\";\nimport OverDueList from \"../../OverDueLists/OverDueList/OverDueList\";\nimport Aux from \"../../../hoc/Aux\";\n\nconst todoList = (props) => {\n  const dueRawDate = new Date(props.time).toLocaleString();\n  const length = dueRawDate.length;\n  const duedate =\n    dueRawDate.substring(0, length - 6) +\n    dueRawDate.substring(length - 3, length);\n\n  const listTime = new Date(props.time).toLocaleString();\n  const timeNow = new Date(new Date().toUTCString()).toLocaleString();\n  const dueOver = listTime < timeNow;\n  if (dueOver === false) {\n    return (\n      <Aux>\n        <li className={classes.TodoList}>\n          <div className={classes.Due}>Due: {duedate}</div>\n          <div className={classes.Content}>{props.content}</div>\n\n          <button onClick={props.click}>Delete</button>\n        </li>\n      </Aux>\n    );\n  } else {\n    return (\n      <OverDueList\n        content={props.content}\n        time={duedate}\n        click={props.click}\n        id={props.id}\n      />\n    );\n  }\n};\n\nexport default todoList;\n","import React, { Component } from \"react\";\nimport Aux from \"../../hoc/Aux\";\nimport InputForm from \"../../components/InputForm/InputForm\";\nimport TodoList from \"../../components/TodoLists/TodoList/TodoList\";\n\nclass TodoBuilder extends Component {\n  state = {\n    todos: [],\n    overdue: [],\n  };\n\n  componentDidMount = () => {\n    const dataExist = localStorage.getItem(\"todo\");\n    // const overDueExist = localStorage.getItem(\"overdue\");\n    const storage = JSON.parse(localStorage.getItem(\"todo\"));\n    const overDueStorage = JSON.parse(localStorage.getItem(\"overdue\"));\n\n    if (dataExist) {\n      this.setState({ todos: storage, overdue: overDueStorage });\n    }\n  };\n\n  addToOverdueStorage = (newState) => {\n    localStorage.setItem(\"overdue\", JSON.stringify(newState));\n  };\n\n  addToList = (event) => {\n    event.preventDefault();\n    const newValue = event.target.desc.value;\n    const newDue = event.target.datetime.value;\n    this.setState(\n      (prevState) => ({\n        todos: [...prevState.todos, { todo: newValue, time: newDue }],\n      }),\n      () => {\n        this.addToStorage(this.state.todos);\n      }\n    );\n  };\n\n  addToStorage = (newState) => {\n    localStorage.setItem(\"todo\", JSON.stringify(newState));\n  };\n\n  deleteTodo = (index) => {\n    const newList = [...this.state.todos];\n    newList.splice(index, 1);\n    this.setState({ todos: newList });\n    localStorage.setItem(\"todo\", JSON.stringify(newList));\n  };\n\n  render() {\n    return (\n      <Aux>\n        <InputForm click={this.addToList} />\n\n        {this.state.todos.map((list, index) => (\n          <TodoList\n            content={list.todo}\n            time={list.time}\n            id={index}\n            click={() => {\n              this.deleteTodo(index);\n            }}\n          />\n        ))}\n      </Aux>\n    );\n  }\n}\n\nexport default TodoBuilder;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Layout from \"./components/Layout/Layout\";\nimport TodoBuilder from \"./container/TodoBuilder/TodoBuilder\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <TodoBuilder />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}